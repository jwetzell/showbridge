{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "Config",
  "title": "Config File Schema",
  "description": "oscee config JSON layout",
  "type": "object",
  "properties": {
    "http": {
      "title": "HTTP configuration",
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "port": {
              "description": "TCP port to listen on (this will be the same port used for websocket connections",
              "type": "number"
            }
          },
          "required": ["port"],
          "additionalProperties": false
        },
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [{ "$ref": "#/definitions/TriggerSender" }, { "$ref": "#/definitions/TriggerRegex" }]
          }
        }
      },
      "required": ["triggers", "params"],
      "additionalProperties": false
    },
    "ws": {
      "title": "WebSocket configuration",
      "type": "object",
      "properties": {
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [{ "$ref": "#/definitions/TriggerSender" }, { "$ref": "#/definitions/TriggerRegex" }]
          }
        }
      },
      "required": ["triggers"],
      "additionalProperties": false
    },
    "osc": {
      "title": "OSC configuration",
      "type": "object",
      "properties": {
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [
              { "$ref": "#/definitions/TriggerSender" },
              { "$ref": "#/definitions/TriggerRegex" },
              { "$ref": "#/definitions/TriggerBytesEqual" },
              { "$ref": "#/definitions/TriggerOSCAddress" }
            ]
          }
        }
      },
      "required": ["triggers"],
      "additionalProperties": false
    },
    "midi": {
      "title": "MIDI configuration",
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "virtualInputName": {
              "description": "Name of the virtual MIDI Input port",
              "type": "string"
            },
            "virtualOutputName": {
              "description": "Name of the virtual MIDI Output port",
              "type": "string"
            }
          },
          "required": [],
          "additionalProperties": false
        },
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [
              { "$ref": "#/definitions/TriggerRegex" },
              { "$ref": "#/definitions/TriggerBytesEqual" },
              { "$ref": "#/definitions/TriggerMIDINoteOff" },
              { "$ref": "#/definitions/TriggerMIDINoteOn" },
              { "$ref": "#/definitions/TriggerMIDIControlChange" },
              { "$ref": "#/definitions/TriggerMIDIProgramChange" }
            ]
          }
        }
      },
      "required": ["triggers"],
      "additionalProperties": false
    },
    "tcp": {
      "title": "TCP configuration",
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "address": {
              "description": "Address to listen on defaults to 0.0.0.0",
              "type": "string"
            },
            "port": {
              "description": "TCP port to listen on",
              "type": "number"
            }
          },
          "required": ["port"],
          "additionalProperties": false
        },
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [
              { "$ref": "#/definitions/TriggerRegex" },
              { "$ref": "#/definitions/TriggerSender" },
              { "$ref": "#/definitions/TriggerBytesEqual" }
            ]
          }
        }
      },
      "required": ["triggers", "params"],
      "additionalProperties": false
    },
    "udp": {
      "title": "UDP configuration",
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "address": {
              "description": "Address to listen on defaults to 0.0.0.0",
              "type": "string"
            },
            "port": {
              "description": "UDP port to listen on",
              "type": "number"
            }
          },
          "required": ["port"],
          "additionalProperties": false
        },
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [
              { "$ref": "#/definitions/TriggerRegex" },
              { "$ref": "#/definitions/TriggerSender" },
              { "$ref": "#/definitions/TriggerBytesEqual" }
            ]
          }
        }
      },
      "required": ["triggers", "params"],
      "additionalProperties": false
    },
    "mqtt": {
      "title": "MQTT configuration",
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "broker": {
              "description": "mqtt broker url",
              "type": "string"
            },
            "username": {
              "description": "username for mqtt broker",
              "type": "string"
            },
            "password": {
              "description": "password for mqtt broker",
              "type": "string"
            },
            "topics": {
              "description": "list of topics to subscribe to",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["broker", "topics"],
          "additionalProperties": false
        },
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [{ "$ref": "#/definitions/TriggerRegex" }]
          }
        }
      },
      "required": ["triggers", "params"],
      "additionalProperties": false
    },
    "bridge": {
      "title": "Bridge configuration",
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "oneOf": [
            {
              "properties": {
                "url": {
                  "description": "bridge url",
                  "type": "string"
                },
                "room": {
                  "description": "room to join",
                  "type": "string"
                }
              },
              "required": ["url", "room"],
              "additionalProperties": false
            },
            {
              "properties": {
                "url": {
                  "description": "bridge url",
                  "type": "string"
                },
                "rooms": {
                  "description": "list of rooms to join",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["url", "rooms"],
              "additionalProperties": false
            }
          ]
        }
      },
      "required": ["params"],
      "additionalProperties": false
    }
  },
  "required": ["http", "ws", "osc", "midi", "tcp", "udp", "mqtt"],
  "definitions": {
    "ActionList": {
      "description": "Actions to be performed if this trigger is fired",
      "type": "array",
      "items": {
        "type": "object",
        "oneOf": [
          { "$ref": "#/definitions/ActionLog" },
          { "$ref": "#/definitions/ActionStore" },
          { "$ref": "#/definitions/ActionMIDIOutput" },
          { "$ref": "#/definitions/ActionForward" },
          { "$ref": "#/definitions/ActionOSCOutput" },
          { "$ref": "#/definitions/ActionUDPOutput" },
          { "$ref": "#/definitions/ActionTCPOutput" },
          { "$ref": "#/definitions/ActionShell" },
          { "$ref": "#/definitions/ActionHTTP" },
          { "$ref": "#/definitions/ActionDelay" },
          { "$ref": "#/definitions/ActionMQTTOutput" },
          { "$ref": "#/definitions/ActionBridgeOutput" }
        ]
      }
    },

    "ActionLog": {
      "$schema": "http://json-schema.org/draft-07/schema",
      "title": "Log Action",
      "description": "This action logs out the incoming message",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "log"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled"],
      "additionalProperties": false
    },
    "ActionStore": {
      "$schema": "http://json-schema.org/draft-07/schema",
      "title": "Store Action",
      "description": "This action stores the configured value in a global vars object. Which will be made available when templating things.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "store"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "Store action params",
          "type": "object",
          "properties": {
            "_key": {
              "description": "key of the variable to store ran through templating",
              "type": "string"
            },
            "key": {
              "description": "key of the variable to store",
              "type": "string"
            },
            "_value": {
              "description": "value of the variable to store ran through templating",
              "type": "string"
            },
            "value": {
              "description": "value of the variable to store",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "params", "enabled"],
      "additionalProperties": false
    },
    "ActionBridgeOutput": {
      "$schema": "http://json-schema.org/draft-07/schema",
      "title": "Bridge Output Action",
      "description": "This action will send the incoming message to the specified bridge room",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "bridge-output"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "Bridge Output action params",
          "type": "object",
          "properties": {},
          "oneOf": [
            {
              "properties": {
                "room": {
                  "description": "room to send the message to",
                  "type": "string"
                }
              },
              "required": ["room"],
              "additionalProperties": false
            },
            {
              "properties": {
                "rooms": {
                  "description": "array of rooms to send the message to",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["rooms"],
              "additionalProperties": false
            },
            {
              "properties": {
                "_room": {
                  "description": "room to template and then send the message to",
                  "type": "string"
                }
              },
              "required": ["_room"],
              "additionalProperties": false
            },
            {
              "properties": {
                "_rooms": {
                  "description": "array of rooms to template and then send the message to",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["_rooms"],
              "additionalProperties": false
            }
          ]
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "params", "enabled"],
      "additionalProperties": false
    },
    "ActionMIDIOutput": {
      "title": "MIDI Output Action",
      "description": "This action will output MIDI using raw MIDI data byte array",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "midi-output"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "MIDI output action params",
          "type": "object",
          "properties": {},
          "oneOf": [
            {
              "title": "MIDI Bytes",
              "properties": {
                "bytes": {
                  "description": "MIDI data to be sent as an array of 3 bytes",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "minItems": 2,
                  "maxItems": 3
                }
              },
              "additionalProperties": false
            },
            {
              "title": "MIDI Note Off Message",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "note_off"
                },
                "channel": {
                  "description": "MIDI channel number",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16
                },
                "note": {
                  "description": "MIDI note value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                },
                "velocity": {
                  "description": "MIDI velocity value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                }
              },
              "required": ["status", "channel", "note", "velocity"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Note On Message",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "note_on"
                },
                "channel": {
                  "description": "MIDI channel number",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16
                },
                "note": {
                  "description": "MIDI note value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                },
                "velocity": {
                  "description": "MIDI velocity value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                }
              },
              "required": ["status", "channel", "note", "velocity"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Polyphonic Aftertouch",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "polyphonic_aftertouch"
                },
                "channel": {
                  "description": "MIDI channel number",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16
                },
                "note": {
                  "description": "MIDI note value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                },
                "pressure": {
                  "description": "MIDI pressure value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                }
              },
              "required": ["status", "channel", "note", "pressure"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Control Change",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "control_change"
                },
                "channel": {
                  "description": "MIDI channel number",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16
                },
                "control": {
                  "description": "MIDI control value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                },
                "value": {
                  "description": "MIDI value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                }
              },
              "required": ["status", "control", "value"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Program Change",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "program_change"
                },
                "channel": {
                  "description": "MIDI channel number",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16
                },
                "program": {
                  "description": "MIDI program value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                }
              },
              "required": ["status", "program"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Channel Aftertouch",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "channel_aftertouch"
                },
                "channel": {
                  "description": "MIDI channel number",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16
                },
                "pressure": {
                  "description": "MIDI pressure value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 127
                }
              },
              "required": ["status", "pressure"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Pitch Bend",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "pitch_bend"
                },
                "channel": {
                  "description": "MIDI channel number",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16
                },
                "value": {
                  "description": "MIDI value",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 16383
                }
              },
              "required": ["status", "value"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Start",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "start"
                }
              },
              "required": ["status"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Continue",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "continue"
                }
              },
              "required": ["status"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Stop",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "stop"
                }
              },
              "required": ["status"],
              "additionalProperties": false
            },
            {
              "title": "MIDI Reset",
              "properties": {
                "status": {
                  "description": "MIDI status value",
                  "type": "string",
                  "const": "reset"
                }
              },
              "required": ["status"],
              "additionalProperties": false
            }
          ],
          "required": []
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "ActionForward": {
      "title": "Forward Action",
      "description": "This action will forward the incoming message to the configured destination",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "forward"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "forward action params",
          "type": "object",
          "properties": {
            "host": {
              "description": "Hostname or address of the server to forward message to",
              "type": "string"
            },
            "port": {
              "description": "Port to forward msg to",
              "type": "integer"
            },
            "protocol": {
              "description": "Protocol to use when forwarding msg",
              "type": "string",
              "enum": ["udp", "tcp"]
            }
          },
          "required": ["host", "port", "protocol"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "ActionOSCOutput": {
      "title": "OSC Output Action",
      "description": "This action will send an OSC message to the configure address:port with the configured address and args",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "osc-output"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "OSC output action params",
          "type": "object",
          "properties": {
            "host": {
              "description": "Hostname or address of the server to send OSC to",
              "type": "string"
            },
            "port": {
              "description": "Port to send OSC to",
              "type": "integer"
            },
            "protocol": {
              "description": "Protocol to use when sending OSC",
              "type": "string",
              "enum": ["udp", "tcp"]
            },
            "_address": {
              "description": "JS template of the OSC address. Will have access to the msg object to subsitute in properties of the message that triggered this action",
              "type": "string"
            },
            "address": {
              "description": "Hardcoded OSC address. _address has priority",
              "type": "string"
            },
            "_args": {
              "description": "Array of args. Strings will be ran through the templating engine same as the _address param",
              "type": "array"
            },
            "args": {
              "description": "Hardcoded array of OSC args",
              "type": "array"
            }
          },
          "required": ["host", "port", "protocol"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "ActionUDPOutput": {
      "title": "UDP Output Action",
      "description": "This action will send a UDP packet to the configured address:port with the configured contents",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "udp-output"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "UDP output action params",
          "type": "object",
          "oneOf": [
            {
              "title": "UDP Bytes",
              "properties": {
                "host": {
                  "description": "Hostname or address of the server to send UDP packet to",
                  "type": "string"
                },
                "port": {
                  "description": "Port to send UDP packet to",
                  "type": "integer"
                },
                "bytes": {
                  "description": "bytes to send",
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": ["host", "port", "bytes"],
              "additionalProperties": false
            },
            {
              "title": "UDP Hex",
              "properties": {
                "host": {
                  "description": "Hostname or address of the server to send UDP packet to",
                  "type": "string"
                },
                "port": {
                  "description": "Port to send UDP packet to",
                  "type": "integer"
                },
                "hex": {
                  "description": "hex string to be sent as bytes (i.e 68 69, 6869, 0x68 0x69, 0x68,0x69)",
                  "type": "string",
                  "pattern": "^[0-9A-Fa-f\\sx,]+$"
                }
              },
              "required": ["host", "port", "hex"],
              "additionalProperties": false
            },
            {
              "title": "UDP Template String",
              "properties": {
                "host": {
                  "description": "Hostname or address of the server to send UDP packet to",
                  "type": "string"
                },
                "port": {
                  "description": "Port to send UDP packet to",
                  "type": "integer"
                },
                "_string": {
                  "description": "string to send ran through templating engine",
                  "type": "string"
                }
              },
              "required": ["host", "port", "_string"],
              "additionalProperties": false
            },
            {
              "title": "UDP Static String",
              "properties": {
                "host": {
                  "description": "Hostname or address of the server to send UDP packet to",
                  "type": "string"
                },
                "port": {
                  "description": "Port to send UDP packet to",
                  "type": "integer"
                },
                "string": {
                  "description": "string to send",
                  "type": "string"
                }
              },
              "required": ["host", "port", "string"],
              "additionalProperties": false
            }
          ]
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "ActionTCPOutput": {
      "title": "TCP Output Action",
      "description": "This action will send a TCP packet to the configured address:port with the configured contents",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "tcp-output"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "TCP output action params",
          "type": "object",
          "properties": {},
          "oneOf": [
            {
              "title": "TCP Bytes",
              "properties": {
                "host": {
                  "description": "Hostname or address of the server to send TCP packet to",
                  "type": "string"
                },
                "port": {
                  "description": "Port to send TCP packet to",
                  "type": "integer"
                },
                "slip": {
                  "description": "whether to SLIP encode the TCP bytes",
                  "type": "boolean"
                },
                "bytes": {
                  "description": "bytes to send",
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": ["host", "port", "slip", "bytes"],
              "additionalProperties": false
            },
            {
              "title": "TCP Hex",
              "properties": {
                "host": {
                  "description": "Hostname or address of the server to send TCP packet to",
                  "type": "string"
                },
                "port": {
                  "description": "Port to send TCP packet to",
                  "type": "integer"
                },
                "slip": {
                  "description": "whether to SLIP encode the TCP bytes",
                  "type": "boolean"
                },
                "hex": {
                  "description": "hex string to be sent as bytes (i.e 68 69, 6869, 0x68 0x69, 0x68,0x69)",
                  "type": "string",
                  "pattern": "^[0-9A-Fa-f\\sx,]+$"
                }
              },
              "required": ["host", "port", "slip", "hex"],
              "additionalProperties": false
            },
            {
              "title": "TCP Template String",
              "properties": {
                "host": {
                  "description": "Hostname or address of the server to send TCP packet to",
                  "type": "string"
                },
                "port": {
                  "description": "Port to send TCP packet to",
                  "type": "integer"
                },
                "slip": {
                  "description": "whether to SLIP encode the TCP bytes",
                  "type": "boolean"
                },
                "_string": {
                  "description": "string to send ran through templating engine",
                  "type": "string"
                }
              },
              "required": ["host", "port", "slip", "_string"],
              "additionalProperties": false
            },
            {
              "title": "TCP Static String",
              "properties": {
                "host": {
                  "description": "Hostname or address of the server to send TCP packet to",
                  "type": "string"
                },
                "port": {
                  "description": "Port to send TCP packet to",
                  "type": "integer"
                },
                "slip": {
                  "description": "whether to SLIP encode the TCP bytes",
                  "type": "boolean"
                },
                "string": {
                  "description": "string to send",
                  "type": "string"
                }
              },
              "required": ["host", "port", "slip", "string"],
              "additionalProperties": false
            }
          ]
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "ActionShell": {
      "title": "Shell Command Action",
      "description": "This action will execute the configured shell command on the system that is running oscee",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "shell"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "Shell action params",
          "type": "object",
          "oneOf": [
            {
              "title": "Template Command",
              "properties": {
                "_command": {
                  "description": "JS literal template of the shell command. Will have access to the properties of the incoming message that triggered this action",
                  "type": "string"
                }
              },
              "required": ["_command"],
              "additionalProperties": false
            },
            {
              "title": "Static Command",
              "properties": {
                "command": {
                  "description": "Shell command to run _command takes priority",
                  "type": "string"
                }
              },
              "required": ["command"],
              "additionalProperties": false
            }
          ]
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "ActionHTTP": {
      "title": "HTTP Action",
      "description": "This command will make the configured http call",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "http"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "HTTP action params",
          "type": "object",
          "properties": {
            "method": {
              "description": "The HTTP method to use i.e GET, POST, PUT",
              "type": "string",
              "enum": ["get", "post", "put", "delete", "patch", "GET", "POST", "PUT", "DELETE", "PATCH"]
            },
            "_url": {
              "description": "JS literal template of the url. Will have access to the properties of the incoming message that triggered this action",
              "type": "string"
            },
            "url": {
              "description": "Url to call",
              "type": "string"
            },
            "contentType": {
              "description": "Content-Type header value mainly useful for POST/PUT/PATCH",
              "type": "string"
            },
            "_body": {
              "description": "JS literal template of the body. Will have access to the properties of the incoming message that triggered this action",
              "type": "string"
            },
            "body": {
              "description": "Body to include with the request",
              "type": "string"
            }
          },
          "required": ["method"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "ActionDelay": {
      "title": "Delay Action",
      "description": "This action will execute the configured actions after the configured amount of time",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "delay"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "description": "delay action params",
          "type": "object",
          "properties": {
            "duration": {
              "description": "time in ms to wait before executing the configured actions",
              "type": "number"
            },
            "actions": {
              "$ref": "#/definitions/ActionList"
            }
          },
          "required": ["duration", "actions"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "ActionMQTTOutput": {
      "$schema": "http://json-schema.org/draft-07/schema",
      "title": "MQTT Output Action",
      "description": "This action publishes an MQTT message",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "mqtt-output"
        },
        "comment": {
          "type": "string"
        },
        "transforms": {
          "$ref": "#/definitions/TransformList"
        },
        "params": {
          "type": "object",
          "properties": {
            "_topic": {
              "description": "the templated MQTT topic to publish the message to",
              "type": "string"
            },
            "topic": {
              "description": "the static MQTT topic to publish the message to",
              "type": "string"
            },
            "_payload": {
              "description": "the templated payload of the mqtt message",
              "type": "string"
            },
            "payload": {
              "description": "the static payload of the mqtt message",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this action is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "params", "enabled"],
      "additionalProperties": false
    },

    "TriggerOSCAddress": {
      "title": "OSC Address Trigger",
      "description": "This trigger will match osc messages by address",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "osc-address"
        },
        "comment": {
          "type": "string"
        },
        "params": {
          "description": "OSC trigger params",
          "type": "object",
          "properties": {
            "address": {
              "description": "OSC Address to match supports OSC 1.0 address patterns spec *,?,{string1,string2},[a-z],[!a-z]",
              "type": "string"
            }
          },
          "required": ["address"],
          "additionalProperties": false
        },
        "actions": {
          "$ref": "#/definitions/ActionList"
        },
        "enabled": {
          "description": "Whether this trigger is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },

    "TriggerSender": {
      "title": "Sender Trigger",
      "description": "This trigger will match messages by sender",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "sender"
        },
        "comment": {
          "type": "string"
        },
        "params": {
          "description": "Host trigger params",
          "type": "object",
          "properties": {
            "address": {
              "description": "Address of the server to match incoming messages against",
              "type": "string"
            }
          },
          "required": ["address"],
          "additionalProperties": false
        },
        "actions": {
          "$ref": "#/definitions/ActionList"
        },
        "enabled": {
          "description": "Whether this trigger is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TriggerBytesEqual": {
      "title": "Bytes Equal Trigger",
      "description": "This trigger will match incoming messages bytes to the ones set in params property",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "bytes-equal"
        },
        "comment": {
          "type": "string"
        },
        "params": {
          "description": "bytes equal trigger params",
          "type": "object",
          "properties": {
            "bytes": {
              "description": "Array of 3 bytes that will be matched to the incoming message",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0,
                "maximum": 255
              }
            }
          },
          "required": ["bytes"],
          "additionalProperties": false
        },
        "actions": {
          "$ref": "#/definitions/ActionList"
        },
        "enabled": {
          "description": "Whether this trigger is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TriggerMIDINoteOff": {
      "title": "MIDI Note Off Trigger",
      "description": "The trigger will match incoming MIDI note off events",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "midi-note-off"
        },
        "comment": {
          "type": "string"
        },
        "params": {
          "description": "MIDI note off trigger params",
          "type": "object",
          "properties": {
            "port": {
              "description": "name of the MIDI port to match against incoming messages",
              "type": "string"
            },
            "note": {
              "description": "Note value to match against incoming the messages",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            },
            "velocity": {
              "description": "Velocity value to match against the incoming message",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            }
          },
          "additionalProperties": false
        },
        "actions": {
          "$ref": "#/definitions/ActionList"
        },
        "enabled": {
          "description": "Whether this trigger is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TriggerMIDINoteOn": {
      "title": "MIDI Note On Trigger",
      "description": "The trigger will match incoming MIDI note on events",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "midi-note-on"
        },
        "comment": {
          "type": "string"
        },
        "params": {
          "description": "MIDI note on trigger params",
          "type": "object",
          "properties": {
            "port": {
              "description": "name of the MIDI port to match against incoming messages",
              "type": "string"
            },
            "note": {
              "description": "note value to match against incoming the messages",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            },
            "velocity": {
              "description": "velocity value to match against the incoming message",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            }
          },
          "additionalProperties": false
        },
        "actions": {
          "$ref": "#/definitions/ActionList"
        },
        "enabled": {
          "description": "Whether this trigger is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TriggerMIDIControlChange": {
      "title": "MIDI Control Change Trigger",
      "description": "The trigger will match incoming MIDI control events",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "midi-control-change"
        },
        "comment": {
          "type": "string"
        },
        "params": {
          "description": "MIDI control change trigger params",
          "type": "object",
          "properties": {
            "port": {
              "description": "name of the MIDI port to match against incoming messages",
              "type": "string"
            },
            "control": {
              "description": "control number to match against incoming the messages",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            },
            "value": {
              "description": "control value to match against the incoming message",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            }
          },
          "additionalProperties": false
        },
        "actions": {
          "$ref": "#/definitions/ActionList"
        },
        "enabled": {
          "description": "Whether this trigger is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TriggerMIDIProgramChange": {
      "title": "MIDI Program Change Trigger",
      "description": "The trigger will match incoming MIDI program events",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "midi-program-change"
        },
        "comment": {
          "type": "string"
        },
        "params": {
          "description": "MIDI program change trigger params",
          "type": "object",
          "properties": {
            "port": {
              "description": "name of the MIDI port to match against incoming messages",
              "type": "string"
            },
            "program": {
              "description": "program number to match against incoming the messages",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            }
          },
          "additionalProperties": false
        },
        "actions": {
          "$ref": "#/definitions/ActionList"
        },
        "enabled": {
          "description": "Whether this trigger is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TriggerRegex": {
      "title": "Regex Trigger",
      "description": "This trigger will match the incoming message properties to the regex patterns",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "regex"
        },
        "comment": {
          "type": "string"
        },
        "params": {
          "description": "Regex trigger params",
          "type": "object",
          "properties": {
            "patterns": {
              "description": "an array of regex patterns",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "properties": {
              "description": "an array of properties on the msg to match the regex patterns to 1:1",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["patterns", "properties"],
          "additionalProperties": false
        },
        "actions": {
          "$ref": "#/definitions/ActionList"
        },
        "enabled": {
          "description": "Whether this trigger is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },

    "TransformList": {
      "description": "Transforms to be performed",
      "type": "array",
      "items": {
        "type": "object",
        "oneOf": [
          { "$ref": "#/definitions/TransformScale" },
          { "$ref": "#/definitions/TransformRound" },
          { "$ref": "#/definitions/TransformFloor" },
          { "$ref": "#/definitions/TransformLog" },
          { "$ref": "#/definitions/TransformPower" },
          { "$ref": "#/definitions/TransformMap" },
          { "$ref": "#/definitions/TransformTemplate" }
        ]
      }
    },

    "TransformScale": {
      "title": "Scale Transform",
      "description": "This tranform will scale the incoming message property",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "scale"
        },
        "params": {
          "description": "Scale transform params",
          "type": "object",
          "properties": {
            "property": {
              "description": "the property of the incoming message to scale",
              "type": "string"
            },
            "inRange": {
              "description": "the range of the incoming numbers i.e [0,100]",
              "type": "array",
              "items": {
                "type": "number"
              },
              "minItems": 2,
              "maxItems": 2
            },
            "outRange": {
              "description": "the range of the outgoing numbers i.e [1,10]",
              "type": "array",
              "items": {
                "type": "number"
              },
              "minItems": 2,
              "maxItems": 2
            }
          },
          "required": ["property", "inRange", "outRange"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this tranform is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TransformRound": {
      "title": "Round Transform",
      "description": "This transform will round the incoming message property",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "round"
        },
        "params": {
          "description": "Round transform params",
          "type": "object",
          "properties": {
            "property": {
              "description": "the property of the incoming message to round",
              "type": "string"
            }
          },
          "required": ["property"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this tranform is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TransformFloor": {
      "title": "Floor Transform",
      "description": "This transform will floor the incoming message property",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "floor"
        },
        "params": {
          "description": "Floor transform params",
          "type": "object",
          "properties": {
            "property": {
              "description": "the property of the incoming message to floor",
              "type": "string"
            }
          },
          "required": ["property"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this tranform is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TransformLog": {
      "title": "Log Transform",
      "description": "This transform will take the log of the incoming message property",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "log"
        },
        "params": {
          "description": "Log transform params",
          "type": "object",
          "properties": {
            "property": {
              "description": "the property of the incoming message",
              "type": "string"
            },
            "base": {
              "description": "the log base",
              "type": "number"
            }
          },
          "required": ["property", "base"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this tranform is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TransformPower": {
      "title": "Power Transform",
      "description": "This transform will take the configured power of the incoming message property",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "power"
        },
        "params": {
          "description": "Power transform params",
          "type": "object",
          "properties": {
            "property": {
              "description": "the property of the incoming message that will be used as the base of the exponent",
              "type": "string"
            },
            "exponent": {
              "description": "the exponent to raise the property value to",
              "type": "number"
            }
          },
          "required": ["property", "exponent"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this tranform is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TransformMap": {
      "title": "Map Transform",
      "description": "This transform will map the incoming message property",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "map"
        },
        "params": {
          "description": "map transform params",
          "type": "object",
          "properties": {
            "property": {
              "description": "the property of the incoming message to map",
              "type": "string"
            },
            "map": {
              "description": "key:value object to lookup the property value in and the resulting value to map it to",
              "type": "object"
            }
          },
          "required": ["property", "map"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this tranform is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    },
    "TransformTemplate": {
      "title": "Template Transform",
      "description": "This transform will template the incoming message property",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "template"
        },
        "params": {
          "description": "Template transform params",
          "type": "object",
          "properties": {
            "property": {
              "description": "the property of the incoming message to populate",
              "type": "string"
            },
            "template": {
              "description": "the template whose result will replace the property value. will have access to the msg object",
              "type": "string"
            }
          },
          "required": ["property", "template"],
          "additionalProperties": false
        },
        "enabled": {
          "description": "Whether this tranform is enabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled", "params"],
      "additionalProperties": false
    }
  }
}
