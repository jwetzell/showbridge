{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "Config",
  "title": "Config",
  "description": "oscee config file schema",
  "type": "object",
  "properties": {
    "logLevel": {
      "description": "pino log level (https://getpino.io/#/docs/api?id=logger-level)",
      "type": "number",
      "enum": [10, 20, 30, 40, 50, 60]
    },
    "http": {
      "description": "object representing the HTTP configuration of oscee",
      "type": "object",
      "properties": {
        "params": {
          "description": "config for osc messages",
          "type": "object",
          "properties": {
            "port": {
              "description": "tcp port to listen on",
              "type": "number"
            }
          },
          "additionalProperties": false,
          "required": ["port"]
        },
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [{ "$ref": "#/definitions/TriggerHost" }, { "$ref": "#/definitions/TriggerRegex" }]
          }
        }
      },
      "required": ["triggers", "params"]
    },
    "osc": {
      "description": "object representing the OSC configuration of oscee",
      "type": "object",
      "properties": {
        "params": {
          "description": "config for osc messages",
          "type": "object",
          "properties": {
            "tcpPort": {
              "description": "tcp port to listen on",
              "type": "number"
            },
            "udpPort": {
              "description": "tcp port to listen on",
              "type": "number"
            }
          },
          "additionalProperties": false,
          "required": ["tcpPort", "udpPort"]
        },
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [{ "$ref": "#/definitions/TriggerHost" }, { "$ref": "#/definitions/TriggerRegex" }]
          }
        }
      },
      "required": ["triggers", "params"]
    },
    "midi": {
      "description": "object representing the MIDI configuration of oscee",
      "type": "object",
      "properties": {
        "triggers": {
          "description": "array of triggers",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [
              { "$ref": "#/definitions/TriggerRegex" },
              { "$ref": "#/definitions/TriggerMidiBytesEqual" },
              { "$ref": "#/definitions/TriggerMidiNoteOff" },
              { "$ref": "#/definitions/TriggerMidiNoteOn" }
            ]
          }
        }
      },
      "required": ["triggers"]
    }
  },
  "required": ["osc", "midi"],
  "definitions": {
    "ActionBase": {
      "title": "Action",
      "description": "something that gets done as a result of trigger firing",
      "type": "object",
      "properties": {
        "type": {
          "description": "the type of action",
          "type": "string"
        },
        "params": {
          "description": "object containg the action type specific settings",
          "type": "object"
        },
        "enabled": {
          "description": "this property allows the action to be enabled or disabled",
          "type": "boolean"
        }
      },
      "required": ["type", "enabled"],
      "additionalProperties": false
    },
    "ActionLog": {
      "$schema": "http://json-schema.org/draft-07/schema",
      "title": "Log Action",
      "description": "This action logs out the incoming message",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/ActionBase" }],
      "properties": {
        "type": {
          "const": "log"
        },
        "additionalProperties": false
      }
    },
    "ActionMidiOutput": {
      "title": "Midi Output Action",
      "description": "This action will output MIDI using raw MIDI data byte array",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/ActionBase" }],
      "properties": {
        "type": {
          "const": "midi-output"
        },
        "params": {
          "description": "MIDI output action params",
          "type": "object",
          "properties": {
            "port": {
              "description": "the midi port number to output the message on",
              "type": "number"
            },
            "data": {
              "description": "midi data to be sent as an array of 3 bytes",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0,
                "maximum": 127
              },
              "minItems": 2,
              "maxItems": 3
            }
          },
          "required": ["port", "data"],
          "additionalProperties": false
        }
      },
      "required": ["params"]
    },
    "ActionOscForward": {
      "title": "OSC Forward Action",
      "description": "This action will forward the incoming OSC to the configured address:port",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/ActionBase" }],
      "properties": {
        "type": {
          "const": "osc-forward"
        },
        "params": {
          "description": "OSC forward action params",
          "type": "object",
          "properties": {
            "host": {
              "description": "the hostname or address of the server to forward OSC to",
              "type": "string"
            },
            "port": {
              "description": "the port to forward OSC to",
              "type": "integer"
            },
            "protocol": {
              "description": "the protocol to use when forwarding OSC",
              "type": "string",
              "enum": ["udp", "tcp"]
            }
          },
          "required": ["host", "port", "protocol"],
          "additionalProperties": false
        }
      },
      "required": ["params"]
    },
    "ActionOscOutput": {
      "title": "OSC Output Action",
      "description": "This action will send an OSC message to the configure address:port with the configured address and args",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/ActionBase" }],
      "properties": {
        "type": {
          "const": "osc-output"
        },
        "params": {
          "description": "OSC output action params",
          "type": "object",
          "properties": {
            "host": {
              "description": "the hostname or address of the server to send OSC to",
              "type": "string"
            },
            "port": {
              "description": "the port to send OSC to",
              "type": "integer"
            },
            "protocol": {
              "description": "the protocol to use when sending OSC",
              "type": "string",
              "enum": ["udp", "tcp"]
            },
            "_address": {
              "description": "JS template of the OSC address has access to the msg object to subsitute in properties of the message that triggered this action",
              "type": "string"
            },
            "_args": {
              "description": "array of args, strings will be ran through the templating engine same as the _address param",
              "type": "array"
            },
            "address": {
              "description": "hardcoded OSC address _address has priority",
              "type": "string"
            },
            "args": {
              "description": "hardcoded array of OSC args",
              "type": "array"
            }
          },
          "required": ["host", "port", "protocol"],
          "additionalProperties": false
        }
      },
      "required": ["params"]
    },
    "ActionShell": {
      "title": "Shell Command Action",
      "description": "This command will execute the configure shell command on the system that is running oscee",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/ActionBase" }],
      "properties": {
        "type": {
          "const": "shell"
        },
        "params": {
          "description": "Shell action params",
          "type": "object",
          "properties": {
            "_command": {
              "description": "JS literal template of the shell command will have access to the properties of the incoming message that triggered this action",
              "type": "string"
            },
            "command": {
              "description": "the shell command to run _command takes priority",
              "type": "string"
            }
          },
          "required": [],
          "additionalProperties": false
        }
      },
      "required": ["params"]
    },

    "TriggerBase": {
      "title": "Trigger",
      "description": "trigger is an incoming message filter based on the type and the params messages can cause the trigger to fire its associated actions",
      "type": "object",
      "properties": {
        "type": {
          "description": "the type of trigger",
          "type": "string"
        },
        "params": {
          "description": "object containg the trigger type specific settings",
          "type": "object"
        },
        "actions": {
          "description": "an array of actions to be performed if this trigger is fired",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [
              { "$ref": "#/definitions/ActionLog" },
              { "$ref": "#/definitions/ActionMidiOutput" },
              { "$ref": "#/definitions/ActionOscForward" },
              { "$ref": "#/definitions/ActionOscOutput" },
              { "$ref": "#/definitions/ActionShell" }
            ]
          }
        },
        "enabled": {
          "description": "this property allows the trigger to be enabled or disabled",
          "type": "boolean"
        }
      },
      "required": ["type", "params", "actions", "enabled"],
      "additionalProperties": false
    },
    "TriggerHost": {
      "title": "Host Trigger",
      "description": "This trigger will match messages by the host that sent them",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/TriggerBase" }],
      "properties": {
        "type": {
          "const": "host"
        },
        "params": {
          "description": "Host trigger params",
          "type": "object",
          "properties": {
            "host": {
              "description": "the hostname or address of the server to match incoming messages against",
              "type": "string"
            }
          },
          "required": ["host"],
          "additionalProperties": false
        }
      }
    },
    "TriggerMidiBytesEqual": {
      "title": "Midi Bytes Equals Trigger",
      "description": "This trigger will match the incoming MIDI bytes to the one configured",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/TriggerBase" }],
      "properties": {
        "type": {
          "const": "midi-bytes-equals"
        },
        "params": {
          "description": "MIDI bytes eqauls trigger params",
          "type": "object",
          "properties": {
            "data": {
              "description": "an array of 3 bytes that will be matched to the incoming message",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "minItems": 1,
              "maxItems": 3
            }
          },
          "required": ["data"],
          "additionalProperties": false
        }
      }
    },
    "TriggerMidiNoteOff": {
      "title": "Midi Note Off Trigger",
      "description": "The trigger will match the incoming MIDI note off events",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/TriggerBase" }],
      "properties": {
        "type": {
          "const": "midi-note-off"
        },
        "params": {
          "description": "MIDI note off trigger params",
          "type": "object",
          "properties": {
            "note": {
              "description": "the note value to match against incoming the messages",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            },
            "velocity": {
              "description": "the velocity value to match against the incoming message",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "TriggerMidiNoteOn": {
      "title": "Midi Note On Trigger",
      "description": "The trigger will match the incoming MIDI note on events",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/TriggerBase" }],
      "properties": {
        "type": {
          "const": "midi-note-on"
        },
        "params": {
          "description": "MIDI note on trigger params",
          "type": "object",
          "properties": {
            "note": {
              "description": "the note value to match against incoming the messages",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            },
            "velocity": {
              "description": "the velocity value to match against the incoming message",
              "type": "integer",
              "minimum": 0,
              "maximum": 127
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "TriggerRegex": {
      "title": "Regex Trigger",
      "description": "This trigger will match the incoming message properties to the regex patterns",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/TriggerBase" }],
      "properties": {
        "type": {
          "const": "regex"
        },
        "params": {
          "description": "Regex trigger params",
          "type": "object",
          "properties": {
            "patterns": {
              "description": "an array of regex patterns",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "properties": {
              "description": "an array of properties on the msg to match the regex patterns to 1:1",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["patterns", "properties"],
          "additionalProperties": false
        }
      }
    }
  }
}
